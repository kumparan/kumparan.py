# Stubs for google.cloud.bigquery.job (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import google.api_core.future.polling
from google.cloud.bigquery._helpers import _EnumApiResourceProperty, _TypedApiResourceProperty
from typing import Any, Optional

class Compression(_EnumApiResourceProperty):
    GZIP: str = ...
    NONE: str = ...

class CreateDisposition(_EnumApiResourceProperty):
    CREATE_IF_NEEDED: str = ...
    CREATE_NEVER: str = ...

class DestinationFormat(_EnumApiResourceProperty):
    CSV: str = ...
    NEWLINE_DELIMITED_JSON: str = ...
    AVRO: str = ...

class Encoding(_EnumApiResourceProperty):
    UTF_8: str = ...
    ISO_8559_1: str = ...

class QueryPriority(_EnumApiResourceProperty):
    INTERACTIVE: str = ...
    BATCH: str = ...

class SourceFormat(_EnumApiResourceProperty):
    CSV: str = ...
    DATASTORE_BACKUP: str = ...
    NEWLINE_DELIMITED_JSON: str = ...
    AVRO: str = ...

class WriteDisposition(_EnumApiResourceProperty):
    WRITE_APPEND: str = ...
    WRITE_TRUNCATE: str = ...
    WRITE_EMPTY: str = ...

class AutoDetectSchema(_TypedApiResourceProperty):
    def __set__(self, instance, value): ...

class _AsyncJob(google.api_core.future.polling.PollingFuture):
    job_id: Any = ...
    def __init__(self, job_id, client) -> None: ...
    @property
    def project(self): ...
    @property
    def job_type(self): ...
    @property
    def path(self): ...
    @property
    def etag(self): ...
    @property
    def self_link(self): ...
    @property
    def user_email(self): ...
    @property
    def created(self): ...
    @property
    def started(self): ...
    @property
    def ended(self): ...
    @property
    def error_result(self): ...
    @property
    def errors(self): ...
    @property
    def state(self): ...
    def exists(self, client: Optional[Any] = ..., retry: Any = ...): ...
    def reload(self, client: Optional[Any] = ..., retry: Any = ...): ...
    def cancel(self, client: Optional[Any] = ...): ...
    def done(self, retry: Any = ...): ...
    def result(self, timeout: Optional[Any] = ...): ...
    def cancelled(self): ...

class LoadJobConfig:
    def __init__(self) -> None: ...
    allow_jagged_rows: Any = ...
    allow_quoted_newlines: Any = ...
    autodetect: Any = ...
    create_disposition: Any = ...
    encoding: Any = ...
    field_delimiter: Any = ...
    ignore_unknown_values: Any = ...
    max_bad_records: Any = ...
    null_marker: Any = ...
    quote_character: Any = ...
    skip_leading_rows: Any = ...
    source_format: Any = ...
    write_disposition: Any = ...
    @property
    def schema(self): ...
    @schema.setter
    def schema(self, value): ...
    def to_api_repr(self): ...
    @classmethod
    def from_api_repr(cls, resource): ...

class LoadJob(_AsyncJob):
    source_uris: Any = ...
    destination: Any = ...
    def __init__(self, job_id, source_uris, destination, client, job_config: Optional[Any] = ...) -> None: ...
    @property
    def allow_jagged_rows(self): ...
    @property
    def allow_quoted_newlines(self): ...
    @property
    def autodetect(self): ...
    @property
    def create_disposition(self): ...
    @property
    def encoding(self): ...
    @property
    def field_delimiter(self): ...
    @property
    def ignore_unknown_values(self): ...
    @property
    def max_bad_records(self): ...
    @property
    def null_marker(self): ...
    @property
    def quote_character(self): ...
    @property
    def skip_leading_rows(self): ...
    @property
    def source_format(self): ...
    @property
    def write_disposition(self): ...
    @property
    def schema(self): ...
    @property
    def input_file_bytes(self): ...
    @property
    def input_files(self): ...
    @property
    def output_bytes(self): ...
    @property
    def output_rows(self): ...
    @classmethod
    def from_api_repr(cls, resource, client): ...

class CopyJobConfig:
    def __init__(self) -> None: ...
    create_disposition: Any = ...
    write_disposition: Any = ...
    def to_api_repr(self): ...
    @classmethod
    def from_api_repr(cls, resource): ...

class CopyJob(_AsyncJob):
    destination: Any = ...
    sources: Any = ...
    def __init__(self, job_id, sources, destination, client, job_config: Optional[Any] = ...) -> None: ...
    @property
    def create_disposition(self): ...
    @property
    def write_disposition(self): ...
    @classmethod
    def from_api_repr(cls, resource, client): ...

class ExtractJobConfig:
    def __init__(self) -> None: ...
    compression: Any = ...
    destination_format: Any = ...
    field_delimiter: Any = ...
    print_header: Any = ...
    def to_api_repr(self): ...
    @classmethod
    def from_api_repr(cls, resource): ...

class ExtractJob(_AsyncJob):
    source: Any = ...
    destination_uris: Any = ...
    def __init__(self, job_id, source, destination_uris, client, job_config: Optional[Any] = ...) -> None: ...
    @property
    def compression(self): ...
    @property
    def destination_format(self): ...
    @property
    def field_delimiter(self): ...
    @property
    def print_header(self): ...
    @property
    def destination_uri_file_counts(self): ...
    @classmethod
    def from_api_repr(cls, resource, client): ...

class QueryJobConfig:
    def __init__(self) -> None: ...
    def to_api_repr(self): ...
    @classmethod
    def from_api_repr(cls, resource): ...
    allow_large_results: Any = ...
    create_disposition: Any = ...
    default_dataset: Any = ...
    destination: Any = ...
    dry_run: Any = ...
    flatten_results: Any = ...
    maximum_billing_tier: Any = ...
    maximum_bytes_billed: Any = ...
    priority: Any = ...
    query_parameters: Any = ...
    udf_resources: Any = ...
    use_legacy_sql: Any = ...
    use_query_cache: Any = ...
    write_disposition: Any = ...
    table_definitions: Any = ...

class QueryJob(_AsyncJob):
    query: Any = ...
    def __init__(self, job_id, query, client, job_config: Optional[Any] = ...) -> None: ...
    @property
    def allow_large_results(self): ...
    @property
    def create_disposition(self): ...
    @property
    def default_dataset(self): ...
    @property
    def destination(self): ...
    @property
    def dry_run(self): ...
    @property
    def flatten_results(self): ...
    @property
    def priority(self): ...
    @property
    def query_parameters(self): ...
    @property
    def udf_resources(self): ...
    @property
    def use_legacy_sql(self): ...
    @property
    def use_query_cache(self): ...
    @property
    def write_disposition(self): ...
    @property
    def maximum_billing_tier(self): ...
    @property
    def maximum_bytes_billed(self): ...
    @property
    def table_definitions(self): ...
    @classmethod
    def from_api_repr(cls, resource, client): ...
    @property
    def query_plan(self): ...
    @property
    def total_bytes_processed(self): ...
    @property
    def total_bytes_billed(self): ...
    @property
    def billing_tier(self): ...
    @property
    def cache_hit(self): ...
    @property
    def num_dml_affected_rows(self): ...
    @property
    def statement_type(self): ...
    @property
    def referenced_tables(self): ...
    @property
    def undeclared_query_paramters(self): ...
    def query_results(self, retry: Any = ...): ...
    def done(self, retry: Any = ...): ...
    def result(self, timeout: Optional[Any] = ..., retry: Any = ...): ...

class QueryPlanEntryStep:
    kind: Any = ...
    substeps: Any = ...
    def __init__(self, kind, substeps) -> None: ...
    @classmethod
    def from_api_repr(cls, resource): ...
    def __eq__(self, other): ...

class QueryPlanEntry:
    name: Any = ...
    entry_id: Any = ...
    wait_ratio_avg: Any = ...
    wait_ratio_max: Any = ...
    read_ratio_avg: Any = ...
    read_ratio_max: Any = ...
    compute_ratio_avg: Any = ...
    compute_ratio_max: Any = ...
    write_ratio_avg: Any = ...
    write_ratio_max: Any = ...
    records_read: Any = ...
    records_written: Any = ...
    status: Any = ...
    steps: Any = ...
    def __init__(self, name, entry_id, wait_ratio_avg, wait_ratio_max, read_ratio_avg, read_ratio_max, compute_ratio_avg, compute_ratio_max, write_ratio_avg, write_ratio_max, records_read, records_written, status, steps) -> None: ...
    @classmethod
    def from_api_repr(cls, resource): ...
