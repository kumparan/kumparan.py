# Stubs for google.cloud.bigquery.client (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from google.cloud.client import ClientWithProject
from typing import Any, Optional

class Project:
    project_id: Any = ...
    numeric_id: Any = ...
    friendly_name: Any = ...
    def __init__(self, project_id, numeric_id, friendly_name) -> None: ...
    @classmethod
    def from_api_repr(cls, resource): ...

class Client(ClientWithProject):
    SCOPE: Any = ...
    def __init__(self, project: Optional[Any] = ..., credentials: Optional[Any] = ..., _http: Optional[Any] = ...) -> None: ...
    def list_projects(self, max_results: Optional[Any] = ..., page_token: Optional[Any] = ..., retry: Any = ...): ...
    def list_datasets(self, include_all: bool = ..., filter: Optional[Any] = ..., max_results: Optional[Any] = ..., page_token: Optional[Any] = ..., retry: Any = ...): ...
    def dataset(self, dataset_id, project: Optional[Any] = ...): ...
    def create_dataset(self, dataset): ...
    def create_table(self, table): ...
    def get_dataset(self, dataset_ref, retry: Any = ...): ...
    def get_table(self, table_ref, retry: Any = ...): ...
    def update_dataset(self, dataset, fields, retry: Any = ...): ...
    def update_table(self, table, properties, retry: Any = ...): ...
    def list_dataset_tables(self, dataset, max_results: Optional[Any] = ..., page_token: Optional[Any] = ..., retry: Any = ...): ...
    def delete_dataset(self, dataset, retry: Any = ...): ...
    def delete_table(self, table, retry: Any = ...): ...
    def job_from_resource(self, resource): ...
    def get_job(self, job_id, project: Optional[Any] = ..., retry: Any = ...): ...
    def cancel_job(self, job_id, project: Optional[Any] = ..., retry: Any = ...): ...
    def list_jobs(self, max_results: Optional[Any] = ..., page_token: Optional[Any] = ..., all_users: Optional[Any] = ..., state_filter: Optional[Any] = ..., retry: Any = ...): ...
    def load_table_from_uri(self, source_uris, destination, job_id: Optional[Any] = ..., job_id_prefix: Optional[Any] = ..., job_config: Optional[Any] = ..., retry: Any = ...): ...
    def load_table_from_file(self, file_obj, destination, rewind: bool = ..., size: Optional[Any] = ..., num_retries: Any = ..., job_id: Optional[Any] = ..., job_id_prefix: Optional[Any] = ..., job_config: Optional[Any] = ...): ...
    def copy_table(self, sources, destination, job_id: Optional[Any] = ..., job_id_prefix: Optional[Any] = ..., job_config: Optional[Any] = ..., retry: Any = ...): ...
    def extract_table(self, source, destination_uris, job_config: Optional[Any] = ..., job_id: Optional[Any] = ..., job_id_prefix: Optional[Any] = ..., retry: Any = ...): ...
    def query(self, query, job_config: Optional[Any] = ..., job_id: Optional[Any] = ..., job_id_prefix: Optional[Any] = ..., retry: Any = ...): ...
    def create_rows(self, table, rows, selected_fields: Optional[Any] = ..., **kwargs): ...
    def create_rows_json(self, table, json_rows, row_ids: Optional[Any] = ..., skip_invalid_rows: Optional[Any] = ..., ignore_unknown_values: Optional[Any] = ..., template_suffix: Optional[Any] = ..., retry: Any = ...): ...
    def query_rows(self, query, job_config: Optional[Any] = ..., job_id: Optional[Any] = ..., job_id_prefix: Optional[Any] = ..., timeout: Optional[Any] = ..., retry: Any = ...): ...
    def list_rows(self, table, selected_fields: Optional[Any] = ..., max_results: Optional[Any] = ..., page_token: Optional[Any] = ..., start_index: Optional[Any] = ..., retry: Any = ...): ...
    def list_partitions(self, table, retry: Any = ...): ...
