# Stubs for google.cloud.storage.blob (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from google.cloud.storage._helpers import _PropertyMixin
from typing import Any, Optional

class Blob(_PropertyMixin):
    chunk_size: Any = ...
    bucket: Any = ...
    def __init__(self, name, bucket, chunk_size: Optional[Any] = ..., encryption_key: Optional[Any] = ...) -> None: ...
    @property
    def chunk_size(self): ...
    @chunk_size.setter
    def chunk_size(self, value): ...
    @staticmethod
    def path_helper(bucket_path, blob_name): ...
    @property
    def acl(self): ...
    @property
    def path(self): ...
    @property
    def client(self): ...
    @property
    def user_project(self): ...
    @property
    def public_url(self): ...
    def generate_signed_url(self, expiration, method: str = ..., content_type: Optional[Any] = ..., generation: Optional[Any] = ..., response_disposition: Optional[Any] = ..., response_type: Optional[Any] = ..., client: Optional[Any] = ..., credentials: Optional[Any] = ...): ...
    def exists(self, client: Optional[Any] = ...): ...
    def delete(self, client: Optional[Any] = ...): ...
    def download_to_file(self, file_obj, client: Optional[Any] = ...): ...
    def download_to_filename(self, filename, client: Optional[Any] = ...): ...
    def download_as_string(self, client: Optional[Any] = ...): ...
    def upload_from_file(self, file_obj, rewind: bool = ..., size: Optional[Any] = ..., content_type: Optional[Any] = ..., num_retries: Optional[Any] = ..., client: Optional[Any] = ...): ...
    def upload_from_filename(self, filename, content_type: Optional[Any] = ..., client: Optional[Any] = ...): ...
    def upload_from_string(self, data, content_type: str = ..., client: Optional[Any] = ...): ...
    def create_resumable_upload_session(self, content_type: Optional[Any] = ..., size: Optional[Any] = ..., origin: Optional[Any] = ..., client: Optional[Any] = ...): ...
    def get_iam_policy(self, client: Optional[Any] = ...): ...
    def set_iam_policy(self, policy, client: Optional[Any] = ...): ...
    def test_iam_permissions(self, permissions, client: Optional[Any] = ...): ...
    def make_public(self, client: Optional[Any] = ...): ...
    def compose(self, sources, client: Optional[Any] = ...): ...
    def rewrite(self, source, token: Optional[Any] = ..., client: Optional[Any] = ...): ...
    def update_storage_class(self, new_class, client: Optional[Any] = ...): ...
    cache_control: Any = ...
    content_disposition: Any = ...
    content_encoding: Any = ...
    content_language: Any = ...
    content_type: Any = ...
    crc32c: Any = ...
    @property
    def component_count(self): ...
    @property
    def etag(self): ...
    @property
    def generation(self): ...
    @property
    def id(self): ...
    md5_hash: Any = ...
    @property
    def media_link(self): ...
    @property
    def metadata(self): ...
    @metadata.setter
    def metadata(self, value): ...
    @property
    def metageneration(self): ...
    @property
    def owner(self): ...
    @property
    def self_link(self): ...
    @property
    def size(self): ...
    storage_class: Any = ...
    @property
    def time_deleted(self): ...
    @property
    def time_created(self): ...
    @property
    def updated(self): ...
