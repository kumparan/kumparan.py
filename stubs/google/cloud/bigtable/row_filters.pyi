# Stubs for google.cloud.bigtable.row_filters (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class RowFilter: ...

class _BoolFilter(RowFilter):
    flag: Any = ...
    def __init__(self, flag) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class SinkFilter(_BoolFilter):
    def to_pb(self): ...

class PassAllFilter(_BoolFilter):
    def to_pb(self): ...

class BlockAllFilter(_BoolFilter):
    def to_pb(self): ...

class _RegexFilter(RowFilter):
    regex: Any = ...
    def __init__(self, regex) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class RowKeyRegexFilter(_RegexFilter):
    def to_pb(self): ...

class RowSampleFilter(RowFilter):
    sample: Any = ...
    def __init__(self, sample) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def to_pb(self): ...

class FamilyNameRegexFilter(_RegexFilter):
    def to_pb(self): ...

class ColumnQualifierRegexFilter(_RegexFilter):
    def to_pb(self): ...

class TimestampRange:
    start: Any = ...
    end: Any = ...
    def __init__(self, start: Optional[Any] = ..., end: Optional[Any] = ...) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def to_pb(self): ...

class TimestampRangeFilter(RowFilter):
    range_: Any = ...
    def __init__(self, range_) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def to_pb(self): ...

class ColumnRangeFilter(RowFilter):
    column_family_id: Any = ...
    start_column: Any = ...
    inclusive_start: Any = ...
    end_column: Any = ...
    inclusive_end: Any = ...
    def __init__(self, column_family_id, start_column: Optional[Any] = ..., end_column: Optional[Any] = ..., inclusive_start: Optional[Any] = ..., inclusive_end: Optional[Any] = ...) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def to_pb(self): ...

class ValueRegexFilter(_RegexFilter):
    def to_pb(self): ...

class ValueRangeFilter(RowFilter):
    start_value: Any = ...
    inclusive_start: Any = ...
    end_value: Any = ...
    inclusive_end: Any = ...
    def __init__(self, start_value: Optional[Any] = ..., end_value: Optional[Any] = ..., inclusive_start: Optional[Any] = ..., inclusive_end: Optional[Any] = ...) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def to_pb(self): ...

class _CellCountFilter(RowFilter):
    num_cells: Any = ...
    def __init__(self, num_cells) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class CellsRowOffsetFilter(_CellCountFilter):
    def to_pb(self): ...

class CellsRowLimitFilter(_CellCountFilter):
    def to_pb(self): ...

class CellsColumnLimitFilter(_CellCountFilter):
    def to_pb(self): ...

class StripValueTransformerFilter(_BoolFilter):
    def to_pb(self): ...

class ApplyLabelFilter(RowFilter):
    label: Any = ...
    def __init__(self, label) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def to_pb(self): ...

class _FilterCombination(RowFilter):
    filters: Any = ...
    def __init__(self, filters: Optional[Any] = ...) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class RowFilterChain(_FilterCombination):
    def to_pb(self): ...

class RowFilterUnion(_FilterCombination):
    def to_pb(self): ...

class ConditionalRowFilter(RowFilter):
    base_filter: Any = ...
    true_filter: Any = ...
    false_filter: Any = ...
    def __init__(self, base_filter, true_filter: Optional[Any] = ..., false_filter: Optional[Any] = ...) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def to_pb(self): ...
